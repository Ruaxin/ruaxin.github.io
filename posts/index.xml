<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on RUAX的博客</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on RUAX的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 28 Nov 2019 17:26:34 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jQuery功能总结</title>
      <link>http://localhost:1313/posts/jquery%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 28 Nov 2019 17:26:34 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/jquery%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</guid>
      <description>jQuery功能总结 1.jQuery 如何获取元素 jQuery()描述: 接受一个包含一个CSS选择器的字符串，用于匹配的一组元素。
关于如何获取元素，jQuery是这样做的，我们将一个选择表达式，放进构造函数jQuery()（简写为$），然后就能得到被选中的元素。
　$(document) //选择整个文档对象 $(&#39;#myId&#39;) //选择ID为myId的网页元素 $(&#39;div.myClass&#39;) // 选择class为myClass的div元素 $(&#39;input[name=first]&#39;) // 选择name属性等于first的input元素  2.jQuery 的链式操作是怎样的 关于链式操作，我们先来看代码：
　$(&#39;#test&#39;).find(&#39;.red&#39;).addClass(&amp;quot;blue&amp;quot;)  如代码所见，链式操作就是选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来。
之所以能这么操作，是因为return this之后，返回了当前调用的这个方法的实例对象this，那就可以继续访问自己的原型了。例：
 addClass(className) { for (let i = 0; i &amp;lt; this.elements.length; i++) { const element = this.elements[i] element.classList.add(className) } return this }  3.jQuery 如何创建元素 还是先看源码：
 let elements if (typeof selectorOrArrayOrTemplate === &amp;quot;string&amp;quot;) { if (selectorOrArrayOrTemplate[0] === &amp;quot;&amp;lt;&amp;quot;) { // 创建 div elements = [createElement(selectorOrArrayOrTemplate)] } else { // 查找 div elements = document.</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>http://localhost:1313/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 20 Nov 2019 15:41:07 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>排序算法 选择排序 let selectSort = (arr) =&amp;gt; { if (arr.length === 0) { console.log(&amp;quot;输入的为空数组！&amp;quot;) } else { for (let i = 0; i &amp;lt; arr.length - 1; i++) { let j = minIndex(arr.slice(i)) + i if (j !== i) { swap(arr, i, j) } } } return arr } let minIndex = (arr) =&amp;gt; { let index = 0 for (let i = 1; i &amp;lt; arr.length; i++) { if (arr[i] &amp;lt; arr[index]) { index = i } } return index } let swap = (arr, i, j) =&amp;gt; { let temp = arr[i] arr[i] = arr[j] arr[j] = temp }  快速排序 let quickSort = (arr) =&amp;gt; { if (arr.</description>
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>http://localhost:1313/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Tue, 12 Nov 2019 21:50:29 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>JS函数的执行时机 先来看以下的这段代码
let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }//结果会打印出6个6  接下来解释一下为什么会打印出6个6：
由于在执行setTimeout之前，先会完成for循环，并且因为i是在外面定义的，所以for循环里只有一个i。完成循环后，i的值为6，再之后执行6次setTimeout，最终打印出6个6。
如果把代码改成这样，就能打印出0,1,2,3,4,5
for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }//结果会打印出0,1,2,3,4,5  因为每次循环都会多创建一个i，就生成了6个不同的值。
let i = 0 let fn = (a) =&amp;gt; { setTimeout(() =&amp;gt; { console.log(a) }, 0) } for (i = 0; i &amp;lt; 6; i++) { fn(i) }  这样也能打印出0,1,2,3,4,5。个人认为可能和上一段代码一样，每次循环都会生成一个a，这样就生成了6个不同的a值。</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>http://localhost:1313/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 10 Nov 2019 12:05:40 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>JS对象基本用法 1 声明对象的两种语法 写法1：
let obj = {&#39;name&#39;: &#39;frank&#39;, &#39;age&#39;: 18}  写法2：
let obj = new Objext({&#39;name&#39;: &#39;frank&#39;})  细节：
- 键名是字符串，不是标识符，可以包括任意字符 - 引号可省略，省略之后就只能写标识符 - 就算引号省略了，键名也还是字符串
2 如何删除对象的属性 写法1：
delete obj.xxx  写法2：
delete obj[&#39;xxx&#39;]  3 如何查看对象的属性 1.查看自身所有属性 Object.keys(obj)  2.查看自身所有属性的值 Object.values(obj)  3.查看自身所有属性和值 Object.entries(obj)  4.查看自身+共有属性 写法1：
console.dir(obj)  写法2：
obj.__proto__  5.两种方法查看单个属性 中括号语法：
obj[&#39;key&#39;]  点语法：
obj.key  重点
- obj.name 等价于 obj[&amp;lsquo;name&amp;rsquo;]
- obj.name 不等价于 obj[name]</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>http://localhost:1313/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 06 Nov 2019 20:33:22 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>JS的基本语法 1. 表达式与语句  表达式
1+2表达式的值为3
add(1,2)表达式的值为函数的返回值
console.log表达式的值为函数本身
console.log(3)表达式的值为undefined
 语句
var a = 1 是一个语句
 二者的区别
表达式一般都有值，语句可能有也可能没有
语句一般会改变环境（声明、赋值）
上面两句话并不是绝对的
 关于空格的补充
大部分空格没有实际意义
var a = 1和var a=1没有区别
加回车大部分时候也不影响
只有return后面不能加回车
  2. 标识符 变量名就是是标识符。JS的标识符对大小写敏感，所以a和A是两个不同的标识符。
规则：
1. 第一个字符，可以是Unicode字母或$或_或中文
2. 后面的字符，除了上面的，还可以有数字
标识符错误示例：
3. if else 语句 语法: 1. if(表达式){语句1}else{语句2} 2. {}可以在只有一句时省略
代码示例：
if (m === 3) { // 满足条件时，执行的语句 } else { // 不满足条件时，执行的语句 }  if else(else代码块总是与离自己最近的那个if语句配对):
if (m === 0) { // .</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>http://localhost:1313/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Thu, 31 Oct 2019 22:25:18 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript的诞生 1.相关时间线  1994年，网景公司（Netscape）发布了Navigator浏览器0.9版，且急需有一种网页脚本语言，使得浏览器可以与网页互动。 1995年Sun公司将Oak语言改名为Java，正式向市场推出，并许诺这种语言可以&amp;rdquo;一次编写，到处运行&amp;rdquo;。 1995年4月，网景公司录用了34岁的系统程序员Brendan Eich，希望他能研究将Scheme语言作为网页脚本语言的可能性。 1995年5月，网景公司做出决策，未来的网页脚本语言必须&amp;rdquo;看上去与Java足够相似&amp;rdquo;，但是比Java简单，使得非专业的网页作者也能很快上手。而Brendan Eich被指定为&amp;rdquo;简化版Java语言&amp;rdquo;的设计师。 1995年5月，Brendan Eich为了应付公司安排的任务，只用10天时间就把JavaScript设计出来了。 1995年10月，解释器开发成功。 1995年12月，向市场推出，立刻被广泛接受，全世界的用户大量使用。 1996年8月，微软公司强势介入，宣布推出自己的脚本语言Jscript。 1996年11月，为了压制微软，网景公司决定申请Javascript的国际标准。 1997年6月，第一个国际标准ECMA-262正式颁布。   2.JavaScript的设计思路  借鉴C语言的基本语法； 借鉴Java语言的数据类型和内存管理； 借鉴Scheme语言，将函数提升到&amp;rdquo;第一等公民&amp;rdquo;（first class）的地位； 借鉴Self语言，使用基于原型（prototype）的继承机制。
JavaScript语言实际上是两种语言风格的混合产物&amp;mdash;-（简化的）函数式编程+（简化的）面向对象编程。  3.造成JavaScript设计缺陷的原因  设计阶段过于仓促:JavaScript的设计，其实只用了十天。而且，设计师是为了向公司交差，本人并不愿意这样设计。另一方面，这种语言的设计初衷，是为了解决一些简单的网页互动（比如，检查&amp;rdquo;用户名&amp;rdquo;是否填写），并没有考虑复杂应用的需要。 没有先例:JavaScript同时结合了函数式编程和面向对象编程的特点，直到今天为止，JavaScript仍然是世界上唯一使用Prototype继承模型的主要语言。这使得它没有设计先例可以参考。 过早的标准化:JavaScript的发展非常快，根本没有时间调整设计。在其推出一年半之后，国际标准就问世了，设计缺陷还没有充分暴露就成了标准。  4.JavaScript的10个设计缺陷  不适合开发大型程序 非常小的标准库 null和undefined 全局变量难以控制 自动插入行尾分号 加号运算符 NaN 数组和对象的区分 == 和 === 基本类型的包装对象  以上内容主要总结自阮一峰老师的这两篇博客： 1. http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html 2. http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html
资料来源：饥人谷</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://localhost:1313/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Mon, 28 Oct 2019 22:28:25 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>浅析 URL URL 相关内容 统一资源定位符（英语：Uniform Resource Locator，缩写：URL；或称统一资源定位器、定位地址、URL地址，俗称网页地址或简称网址）是因特网上标准的资源的地址（Address），如同在网络上的门牌。它最初是由蒂姆·伯纳斯-李发明用来作为万维网的地址，现在它已经被万维网联盟编制为因特网标准RFC 1738。
组成：协议+域名或IP+端口号+路径+查询字符串+锚点  协议：http，https是协议。 IP：1.定位一台设备；2.封装数据报文，以便跟其他设备交流。 域名：com是顶级域名，baidu.com是二级域名（俗称一级域名），www.baidu.com是三级域名（俗称二级域名）。 端口号：以数字方式表示，若为默认值可省略，如HTTP 80；HTTPS 443；FTP 21，一共有65535个端口。 路径：以“/”字符区别路径中的每一个目录名称。 查询字符串：GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题。 锚点：以“#”字符为起点，锚点不支持中文，锚点无法在Network面板看到，锚点不会传给服务器  其他总结  DNS 的作用是什么
域名系统（英语：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。简单来说，域名和IP是通过DNS对应起来。
 nslookup 命令怎么用
nslookup命令用于查询域名和IP
nslookup baidu.com  ping 命令怎么用
ping命令能得到域名的IP
ping baidu.com  其他
 域名：一个域名可以对应不同IP（均衡负载），一个域名可以对应不同IP（共享主机）。 端口：0到1023端口是系统用的，管理员权限才能用1024端口，http-server默认8080端口，端口如果被占用，只能换一个，IP和端口缺一不可。 curl命令：用curl可以发出HTTP请求,url会被curl工具重写，先请求DNS获得IP,再进行TCP连接，TCP连接成功后，开始发送HTTP请求，响应结束后，关闭TCP连接
curl -v http://baidu.com curl -s -v -- https://baidu.com    资料来源：饥人谷</description>
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>http://localhost:1313/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 25 Oct 2019 07:28:48 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>CSS知识总结 1.浏览器渲染原理  根据HTML构建HTML树（DOM） 根据CSS构建CSS树（CSSOM） 将两棵树合并成一棵渲染树（render tree） Layout布局（文档流、盒模型、计算大小和位置） Paint绘制（把边框颜色、文字颜色、阴影等画出来） Compose合成（根据层叠关系展示画面）  2.CSS 动画的两种做法 1.transform  四个常用功能
 位移 translate
 缩放 scale
 选择 rotate
 倾斜 skew   具体内容：https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform
红心动画代码示例（transform）:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;JS Bin&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;heart&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;bottom&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  * { box-sizing: border-box; } #heart { display: inline-block; margin: 100px; position: relative; transition: all 1s; } #heart:hover { transform: scale(1.</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://localhost:1313/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 04 Oct 2019 11:22:38 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML 常用标签 1.a 标签的用法 属性  href （超链接）  ##### 1.1 href 的取值
 网址
https://google.com
http://google.com
//google.com（推荐） 路径
/a/b/c 以及 a/b/c 伪协议
javascript:代码
mailto:邮箱
tel:手机号 ID 跳转到指定标签
href=#xxxx 代码示例:
 &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;1&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;2&amp;lt;/p&amp;gt; &amp;lt;p id=&amp;quot;xxx&amp;quot;&amp;gt;3&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;4&amp;lt;/p&amp;gt; &amp;lt;a href=&amp;quot;https://baidu.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;/a/b/c.html&amp;quot;&amp;gt;c.html&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;index.html&amp;quot;&amp;gt;index&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;javascript:alert(1);&amp;quot;&amp;gt;JavaScript伪协议&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;空的伪协议&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;#xxx&amp;quot;&amp;gt;查看xxx&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;mailto:xxxxxxxx@qq.com&amp;quot;&amp;gt;发邮件&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;tel:10010&amp;quot;&amp;gt;打电话&amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt;   ##### 1.2 a 的 target 的取值
 内置名字
_blank（新页面）
_top（最顶层页面）
_parent（当前所在页面的上一层）
_self（当前页面）</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://localhost:1313/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 02 Oct 2019 18:07:08 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>HTML 入门笔记 1 1.HTML 是谁发明的 蒂莫西·约翰·伯纳斯-李爵士(英语：Sir Timothy John Berners-Lee，1955 年 6 月 8 日－） 2.HTML 起手应该写什么 emmet 感叹号
具体操作：！+ Tab
3.常用的表章节的标签有哪些，分别是什么意思  h1~h6 标题 section 章节 article 文章 p 段落 header 头部 footer 脚部(&amp;copy;版权标志写法:&amp;amp;copy;) main 主要内容 aside 旁支内容 div 划分  示例：
4.全局属性有哪些  calss(标签) contenteditable(使文本可编辑) hidden(隐藏) id(用来表示全局唯一的标签,但全局唯一性没有保障,最好不用) style(样式) tabindex(Tab 操作,tabindex 不必是连续的,0 表示最后访问,-1 表示不访问) title(添加附加说明)  示例： 关于内容溢出的解决方案： 5.常用的内容标签有哪些，分别是什么意思  ol+li(ol 顺序的列表，li 列表中的项目) ul+li(ul 没有顺序的列表，li 列表中的项目) dl+dt+dd(dl 描述列表，dt 描述对象，dd 描述内容) pre(表示保留原来的格式) hr(下划线) br(换行) a(超链接) em(em 表示语气上的强调) strong(strong 表示内容本身的重要性) code(代码，字体等宽) quote(引用) blockquote(块结构的引用)  示例： 表格优化 资料来源：饥人谷</description>
    </item>
    
    <item>
      <title>如何用hugo搭建个人博客</title>
      <link>http://localhost:1313/posts/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 24 Sep 2019 23:29:52 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>安装hugo  下载hugo并解压到D:\Software\hugo
 把D:\Software\hugo\加到PATH
  快速搭建博客  进入hugo官网，点击Quick Start开始
 用cmder执行Step 2，新建一个博客生成器，例：
hugo new site xxx.github.io-creator  用VSCode打开xxx.github.io-creator，执行Step 3来设置主题，例：
git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  用Step 4的代码来创建第一篇博客，例：
hugo new posts/第一篇博客.md  编辑完内容，把draft：true改false
 执行Step 5的代码
hugo server -D  得到一个本地预览的地址http://localhost:1313/
 关于主题的配置，可打开config.toml进行汉化，改标题等，例：
baseURL = &amp;quot;https://example.org/&amp;quot; languageCode = &amp;quot;zh-Hans&amp;quot; title = &amp;quot;XXX的博客&amp;quot; theme = &amp;quot;ananke&amp;quot;  运行hugo，得到public目录,进入public目录，执行
git init git add .</description>
    </item>
    
  </channel>
</rss>